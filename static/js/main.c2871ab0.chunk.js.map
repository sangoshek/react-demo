{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["MenuList","props","react_default","a","createElement","href","link","name","Banner","className","headline","content","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","menu","content2","facilities","keyword","_this2","fetch","headers","Content-Type","Accept","then","response","json","responseJson","setState","res","contentJson","res2","content2Json","fres","facilitiesJson","id","map","m","index","key","Link","banner","type","src","alt","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c2871ab0.chunk.js","sourcesContent":["import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\n\nconst dataURL = './assets/data/menu.json';\nconst contentURL ='./assets/data/content.json';\nconst facilityURL ='./nassets/data/facility.json';\n\nfunction MenuList(props) {\n  return (\n    <li ><a href={props.link}>{props.name}</a></li>\n  );\n}\n\nfunction Banner(props){\n  \n  return(\n    \t\n\t\t\t\t<div className=\"content\">\n\t\t\t\t\t<h1>{props.headline}</h1>\n\t\t\t\t\t<p>{props.content}</p>\t\t\t\t\t\n\t\t\t\t</div>\n  )\n}\n\nfunction showPartOne(){\n  return(\n    <div className=\"inner flex flex-3\">\n\t\t\t\t\t<div className=\"flex-item left\">\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<h3>Efficient Work</h3>\n\t\t\t\t\t\t\t<p>Morbi in sem quis dui plalorem ipsum<br /> euismod in, pharetra sed ultricies.</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<h3>Cutting-edge tech</h3>\n\t\t\t\t\t\t\t<p>Tristique yonve cursus jam nulla quam<br /> loreipsu gravida adipiscing lorem</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"flex-item image fit round\">\n\t\t\t\t\t\t<img src=\"images/pic01.jpg\" alt=\"\" />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"flex-item right\">\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<h3>Mobile First</h3>\n\t\t\t\t\t\t\t<p>Sed adipiscing ornare risus. Morbi estes<br /> blandit sit et amet, sagittis magna.</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<h3>Viral spread</h3>\n\t\t\t\t\t\t\t<p>Pellentesque egestas sem. Suspendisse<br /> modo ullamcorper feugiat lorem.</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n        \n  )\n}\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      menu: [],\n      content: [],\n      content2:[],\n      facilities:[],\n      keyword:'',\n    };\n  }\n\n  componentWillMount() {\n    fetch(dataURL, {\n      headers : { \n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n       }\n    })\n      .then(response => response.json())\n      .then((responseJson) => {\n        this.setState({menu: responseJson})\n      })\n\n      fetch(contentURL, {\n        headers : { \n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n         }\n      })\n        .then(res => res.json())\n        .then((contentJson) => {\n          this.setState({content: contentJson});\n          \n      })\n\n      fetch(contentURL, {\n        headers : { \n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n         }\n      })\n        .then(res2 => res2.json())\n        .then((content2Json) => {\n          this.setState({content2: content2Json});\n          \n      })\n\n      fetch(facilityURL, {\n        headers : { \n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n         }\n      })\n        .then(fres => fres.json())\n        .then((facilitiesJson) => {\n          this.setState({facilities: facilitiesJson});\n          \n      })\n\n\n  }\n\n\n  \n  render() {\n    // fecth data to menu.\n    const { menu } = this.state;\n    const { content } = this.state;\n\n    return (\n      <div className=\"App\">\n        <nav id=\"menu\">\n          <ul className=\"links\">\n            {menu.map((m, index) =>\n                <MenuList key={index} link={m.Link} name={m.name}></MenuList>\n            )}      \n          </ul>\n        </nav>\n\n        <section id=\"banner\" className=\"wrapper\">       \n          {content.map((banner, index) =>\n              <Banner key={index} headline={banner.headline} content={banner.content}></Banner>\n          )}\n        </section>\n        \n       <section id=\"searching\" className=\"wrapper bg-grey\">\n            <h2>Search the Facilities you want:</h2>\n            <input className=\"form-control\" type=\"text\" ></input>\n            <button >search</button>\n            <ul className=\"list-group\">\n              \n            </ul>\n       </section>   \n\n\n        <section id=\"one\" className=\"wrapper bg-white\">\n            {showPartOne()}\n\t\t\t  </section>\n\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('body'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}